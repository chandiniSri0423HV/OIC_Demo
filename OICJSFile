def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
   for (int i = 0; i < input.length(); i++) {
       if (input.charAt(i) == '%') {
           result.append('%')
       }
       result.append(input.charAt(i))
   }
   return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.OIC_URL
    } else if (instance_selected.equals("UAT")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.OIC_URL
    }
}

pipeline {
    agent any
    environment {
        DEV_Creds = credentials('DEV_CredID')
        OIC_URL = credentials('OIC_URL')
    }
  /*  parameters {
        choice(name: 'Instance_URL', choices: ['DEV', 'UAT'], description: 'Select Instance')
        choice(name: 'Import_Method', choices: ['New', 'Replace'], description: 'Select import method')
        string(name: 'IAR_File_Name', defaultValue: '', description: 'Name of the IAR file')
        string(name: 'Integration_Identifier', defaultValue: '', description: 'Integration Identifier')
        string(name: 'Connection_Properties', defaultValue: '', description: 'CSV file with connection details')
        string(name: 'Lookup_Files', defaultValue: '', description: 'Comma-separated list of lookup files')
        booleanParam(name: 'Activate_Integration', defaultValue: false, description: 'Check to activate integration')
    }*/
    stages {
        stage('Import Integration') {
            steps {
                script {
                    Update_details(params.Instance_URL.toString())
                    def selectedOption = params.Import_Method.trim()
                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        def integURL = "${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                        def deployIntegCmd = "curl --location \"${integURL}\" --user ${env.USR}:${env.PSW} --form \"file=@\\\"${params.IAR_File_Name}\\\"\""
                        bat(deployIntegCmd)
                    } else if (selectedOption == 'Replace') {
                        echo 'Replacing an integration'
                        def integName = params.Integration_Identifier.toString()
                        def deactivateIntegrationCmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json -d 'enableAsyncActivationMode=true' \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateIntegrationCmd)
                        def updateIntegFileCmd = "curl -X PUT --user ${env.USR}:${env.PSW} --header \"Accept: application/json\" --form \"file=@\\\"${params.IAR_File_Name}\\\"\" --form type=application/octet-stream ${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                        bat(updateIntegFileCmd)
                    } else {
                        echo 'No import method is selected'
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.Connection_Properties).trim()
                    def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }
                    records.each { record ->
                        def field1 = record[0], field2 = record[1], field3 = record[2], field4 = record[3]
                        def conProperties = """
                            { 
                                "connectionProperties": { 
                                    "propertyGroup": "CONNECTION_PROPS",
                                    "propertyName": "connectionUrl",
                                    "propertyType": "URL",
                                    "propertyValue": "${field1}"
                                },
                                "securityPolicy": "BASIC_AUTH",
                                "securityProperties": [
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "username",
                                        "propertyValue": "${field2}"
                                    },
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "password",
                                        "propertyValue": "${field3}"
                                    }
                                ]
                            }
                        """
                        writeFile file: 'payload.json', text: conProperties.replace('\n', '').trim()
                        def selectedOption = params.Import_Method.trim()
                        echo (selectedOption == 'New') ? 'Adding new connection' : 'Replacing a connection'
                        bat """
                            curl -X POST --user ${env.USR}:${env.PSW} --header "X-HTTP-Method-Override:PATCH" --header "Content-Type:application/json" -d @payload.json "${env.serviceURL}/ic/api/integration/v1/connections/${field4}"
                        """
                        if (selectedOption == 'New') {
                            echo "New connection configured"
                        }
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def files = (params.Lookup_Files ?: '').split(',')
                    def selectedOption = params.Import_Method.trim()
                    files.each { fileName ->
                        if (fileName?.trim()) {
                            def cleanName = fileName.trim()
                            echo (selectedOption == 'New') ? 'Adding new lookup' : 'Replacing a lookup'
                            def method = (selectedOption == 'New') ? 'POST' : 'PUT'
                            bat """
                                curl -X ${method} --user ${env.USR}:${env.PSW} -F \"file=@${cleanName}\" -F \"type=application/octet-stream\" ${env.serviceURL}/ic/api/integration/v1/lookups/archive
                            """
                        }
                    }
                }
            }
        }

        stage('Activation of Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier.toString()
                    if (params.Activate_Integration) {
                        echo 'Checkbox is checked'
                        def activateCmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Activate.json --location \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(activateCmd)
                        echo "Integration Activated"
                    } else {
                        echo 'Checkbox is not checked'
                        def deactivateCmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json -d 'enableAsyncActivationMode=true' \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateCmd)
                        echo "Integration Configured"
                    }
                }
            }
        }
    }
    post {
        always {
            emailext(
                to: 'chandini.srisailaxmiboddu2304@gmail.com',
                subject: "Jenkins build: ${currentBuild.currentResult}: ${env.JOB_NAME}",
                body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                attachLog: true
            )
        }
    }
}
