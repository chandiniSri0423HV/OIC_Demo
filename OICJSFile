def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
   for (int i = 0; i < input.length(); i++) {
       if (input.charAt(i) == '%') {
           result.append('%')
       }
       result.append(input.charAt(i))
   }
   return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected == "DEV" || instance_selected == "UAT") {
        env.serviceURL = env.OIC_URL
    }
}

pipeline {
    agent any
    environment {
        OIC_URL = 'https://testinstance-idevjxz332qf-ia.integration.ocp.oraclecloud.com'
    }

    parameters {
        string(name: 'Instance_URL', defaultValue: 'DEV', description: 'Instance (DEV/UAT)')
        string(name: 'Import_Method', defaultValue: 'New', description: 'New or Replace')
        string(name: 'IAR_File_Name', defaultValue: 'ITEM_INTEGRATION_01.00.0000.iar', description: 'Name of the IAR file')
        string(name: 'Integration_Identifier', defaultValue: 'ITEM_INTEGRATION|01.00.0000', description: 'Integration Identifier')
        string(name: 'Connection_Properties', defaultValue: 'ConnectionDetails.csv', description: 'CSV file for connection configuration')
    }

    stages {
        stage('Import Integration') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        Update_details(params.Instance_URL.toString())
                        def selectedOption = params.Import_Method.trim()

                        if (selectedOption == 'New') {
                            echo 'Adding new integration'
                            def integURL = "${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                            def deployIntegCmd = "curl --location \"${integURL}\" --user ${USR}:${PSW} --form \"file=@\\\"${params.IAR_File_Name}\\\"\""
                            bat(deployIntegCmd)

                        } else if (selectedOption == 'Replace') {
                            echo 'Replacing an integration'
                            def integName = params.Integration_Identifier.toString()
                            def deactivateIntegrationCmd = "curl --user ${USR}:${PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json -d 'enableAsyncActivationMode=true' \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                            bat(deactivateIntegrationCmd)

                            def updateIntegFileCmd = "curl -X PUT --user ${USR}:${PSW} --header \"Accept: application/json\" --form \"file=@\\\"${params.IAR_File_Name}\\\"\" --form type=application/octet-stream ${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                            bat(updateIntegFileCmd)
                        } else {
                            echo 'No import method is selected'
                        }
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def csvFile = readFile(params.Connection_Properties).trim()
                        def records = csvFile.readLines().drop(1).collect { line -> line.tokenize(',') }

                        records.each { record ->
                            def field1 = record[0]
                            def field2 = record[1]
                            def field3 = record[2]
                            def field4 = record[3]

                            def conProperties = """
                                { 
                                    "connectionProperties": { 
                                        "propertyGroup": "CONNECTION_PROPS",
                                        "propertyName": "connectionUrl",
                                        "propertyType": "URL",
                                        "propertyValue": "${field1}"
                                    },
                                    "securityPolicy": "BASIC_AUTH",
                                    "securityProperties": [
                                        {
                                            "propertyGroup": "CREDENTIALS",
                                            "propertyName": "username",
                                            "propertyValue": "${field2}"
                                        },
                                        {
                                            "propertyGroup": "CREDENTIALS",
                                            "propertyName": "password",
                                            "propertyValue": "${field3}"
                                        }
                                    ]
                                }
                            """
                            writeFile file: 'payload.json', text: conProperties.replace('\n', '').trim()
                            def selectedOption = params.Import_Method.trim()
                            echo "${selectedOption} connection"
                            bat """
                                curl -X POST --user ${USR}:${PSW} --header "X-HTTP-Method-Override:PATCH" --header "Content-Type:application/json" -d @payload.json "${env.serviceURL}/ic/api/integration/v1/connections/${field4}"
                            """
                        }
                    }
                }
            }
        }
    }
}
