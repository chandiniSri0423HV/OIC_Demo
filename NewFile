def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        withCredentials([usernamePassword(credentialsId: 'DEV_CredID', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
            env.USR = USR
            env.PSW = PSW
            env.serviceURL = env.OIC_URL   // Use global environment variable or define 'OIC_URL' in Global Properties
        }
    }
}

pipeline {
    agent any

    parameters {
        string(name: 'InstanceURL', defaultValue: 'DEV', description: 'Environment to deploy to')
        string(name: 'Import_Method', defaultValue: 'New', description: 'New or Replace Integration')
        string(name: 'IARFileName', defaultValue: 'ITEM_INTEGRATION_01.00.0000.iar', description: 'Integration Archive File')
        string(name: 'Integration_Identifier', defaultValue: 'ITEM_INTEGRATION', description: 'Integration Name for Activation')
        string(name: 'ConnectionProperties', defaultValue: 'connections.csv', description: 'CSV file for connections')
        string(name: 'FileNames', defaultValue: '', description: 'Comma-separated Lookup file names')
        booleanParam(name: 'Activate_Integration', defaultValue: false, description: 'Activate integration after import')
    }

    stages {
        stage('Import Integration') {
            steps {
                script {
                    Update_details(params.InstanceURL)
                    def selectedOption = params.Import_Method.trim()
                    def archivePath = params.IARFileName

                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        def url = "${env.serviceURL}/ic/api/integration/v1/integrations/archive"
                        def curlCmd = "curl --location \"${url}\" --user ${env.USR}:${env.PSW} --form \"file=@\\\"${archivePath}\\\"\""
                        bat(curlCmd)
                    } else if (selectedOption == 'Replace') {
                        def integName = params.Integration_Identifier
                        echo 'Replacing existing integration'
                        def deactivateCmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(deactivateCmd)

                        def replaceCmd = "curl -X PUT --user ${env.USR}:${env.PSW} --header \"Accept: application/json\" --form \"file=@\\\"${archivePath}\\\"\" --form type=application/octet-stream \"${env.serviceURL}/ic/api/integration/v1/integrations/archive\""
                        bat(replaceCmd)
                    } else {
                        echo 'No valid Import_Method provided.'
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.ConnectionProperties).trim()
                    def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }

                    records.each { rec ->
                        def connectionUrl = rec[0]
                        def username = rec[1]
                        def password = rec[2]
                        def connName = rec[3]

                        def connPayload = """
                        {
                            "connectionProperties": {
                                "propertyGroup": "CONNECTION_PROPS",
                                "propertyName": "connectionUrl",
                                "propertyType": "URL",
                                "propertyValue": "${connectionUrl}"
                            },
                            "securityPolicy": "BASIC_AUTH",
                            "securityProperties": [
                                {
                                    "propertyGroup": "CREDENTIALS",
                                    "propertyName": "username",
                                    "propertyValue": "${username}"
                                },
                                {
                                    "propertyGroup": "CREDENTIALS",
                                    "propertyName": "password",
                                    "propertyValue": "${password}"
                                }
                            ]
                        }
                        """.stripIndent()

                        writeFile file: 'payload.json', text: connPayload

                        echo "Configuring connection ${connName}"
                        bat """
                        curl -X POST --user ${env.USR}:${env.PSW} --header "X-HTTP-Method-Override:PATCH" --header "Content-Type:application/json" -d @payload.json "${env.serviceURL}/ic/api/integration/v1/connections/${connName}"
                        """
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def selectedOption = params.Import_Method.trim()
                    def fileList = params.FileNames.split(',').collect { it.trim() }.findAll { it }

                    fileList.each { fileName ->
                        if (selectedOption == 'New') {
                            echo "Importing new lookup: ${fileName}"
                            bat "curl -X POST --user ${env.USR}:${env.PSW} -F \"file=@${fileName}\" -F \"type=application/octet-stream\" ${env.serviceURL}/ic/api/integration/v1/lookups/archive"
                        } else if (selectedOption == 'Replace') {
                            echo "Replacing lookup: ${fileName}"
                            bat "curl -X PUT --user ${env.USR}:${env.PSW} -F \"file=@${fileName}\" -F \"type=application/octet-stream\" ${env.serviceURL}/ic/api/integration/v1/lookups/archive"
                        }
                    }
                }
            }
        }

        stage('Activation of Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier
                    if (params.Activate_Integration) {
                        echo 'Activating integration...'
                        def cmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Activate.json \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(cmd)
                    } else {
                        echo 'Deactivating integration...'
                        def cmd = "curl --user ${env.USR}:${env.PSW} --header \"Content-Type: application/json\" --header \"X-HTTP-Method-Override: PATCH\" -d @Deactivate.json \"${env.serviceURL}/ic/api/integration/v1/integrations/${integName}\""
                        bat(cmd)
                    }
                }
            }
        }
    }
}
