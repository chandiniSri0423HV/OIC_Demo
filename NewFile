def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.DEV_URL
    } else if (instance_selected.equals("UAT")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.TEST_URL
        env.testInstance = env.test_Integration_Instance
    }
}

pipeline {
    agent any

    stages {
        stage('Import Integration') {
            when {
                expression { return params?.Import_Method && params?.IARFileName }
            }
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW'),
                        string(credentialsId: 'OAuth', variable: 'OAuth')
                    ]) {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def selectedOption = "${params.Import_Method}".trim()
                        if (selectedOption == 'New') {
                            echo "Adding New Integration"
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer ${OAuth}" ^
                                --form "file=@${params.IARFileName}"
                            """
                        } else if (selectedOption == 'Replace' && params?.Integration_Identifier) {
                            echo 'Replacing an integration'
                            def integName = params.Integration_Identifier.toString()
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/${integName}?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer ${OAuth}" ^
                                --header "Content-Type: application/json" ^
                                --header "X-HTTP-Method-Override: PATCH" ^
                                --data "{\\"status\\":\\"CONFIGURED\\"}"
                            """
                            echo 'Deactivated Integration to be Replaced'
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer ${OAuth}" ^
                                --form "file=@${params.IARFileName}"
                            """
                            echo 'Integration Replaced'
                        } else {
                            echo 'No valid import method or integration identifier provided'
                        }
                    }
                }
            }
        }

        stage('Import Connection') {
            when {
                expression { return params?.ConnectionProperties && fileExists(params.ConnectionProperties) }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'OAuth', variable: 'OAuth')
                    ]) {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def csvFile = readFile(params.ConnectionProperties).trim()
                        def rows = csvFile.split("\n")

                        for (def row : rows) {
                            def columns = row.split(",")
                            def connName = columns[0].trim()
                            def fileName = columns[1].trim()

                            if (params.Import_Method == 'New') {
                                echo "Creating new connection: ${connName}"
                                bat """
                                    curl -X POST "${serviceURL}/ic/api/integration/v1/connections?integrationInstance=${testInstance}" ^
                                    -H "Authorization: Bearer ${OAuth}" ^
                                    -F "file=@${fileName}" -F "type=application/json"
                                """
                            } else if (params.Import_Method == 'Replace') {
                                echo "Replacing connection: ${connName}"
                                bat """
                                    curl -X PUT "${serviceURL}/ic/api/integration/v1/connections/${connName}?integrationInstance=${testInstance}" ^
                                    -H "Authorization: Bearer ${OAuth}" ^
                                    -F "file=@${fileName}" -F "type=application/json"
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Import Lookup') {
            when {
                expression { return params?.Lookup_FileNames }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'OAuth', variable: 'OAuth')]) {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def files = params.Lookup_FileNames.split(',')
                        def selectedOption = params.Import_Method.trim()

                        for (int i = 0; i < files.size(); i++) {
                            def fileName = files[i].trim()
                            if (fileName) {
                                if (selectedOption == 'New') {
                                    echo 'Adding new lookup'
                                    bat """
                                        curl -X POST ^
                                        -H "Authorization: Bearer ${OAuth}" ^
                                        -F "file=@${fileName}" -F "type=application/octet-stream" ^
                                        "${serviceURL}/ic/api/integration/v1/lookups/archive?integrationInstance=${testInstance}"
                                    """
                                } else if (selectedOption == 'Replace') {
                                    echo 'Replacing a lookup'
                                    bat """
                                        curl -X PUT ^
                                        -H "Authorization: Bearer ${OAuth}" ^
                                        -F "file=@${fileName}" -F "type=application/octet-stream" ^
                                        "${serviceURL}/ic/api/integration/v1/lookups/archive?integrationInstance=${testInstance}"
                                    """
                                } else {
                                    echo 'No valid import method selected for lookup'
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Activate Integration') {
            when {
                expression {
                    return params?.Activate_Integration?.toBoolean() && params?.Integration_Identifier
                }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'OAuth', variable: 'OAuth')]) {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def integName = params.Integration_Identifier.toString()
                        echo "Activating integration: ${integName}"
                        bat """
                            curl -X POST "${serviceURL}/ic/api/integration/v1/integrations/${integName}/actions/activate?integrationInstance=${testInstance}" ^
                            -H "Authorization: Bearer ${OAuth}"
                        """
                    }
                }
            }
        }
    }
}
