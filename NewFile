def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
   for (int i = 0; i < input.length(); i++) {
       if (input.charAt(i) == '%') {
           result.append('%')
       }
       result.append(input.charAt(i))
   }
   return result.toString()
}

pipeline {
    agent any

    stages {
        stage('Import Integration') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')]) {
                    script {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            echo "Using DEV environment"
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        echo "Service URL: ${serviceURL}"
                        echo "Import Method: ${params.Import_Method}"

                        // Insert Bearer token logic here
                        withCredentials([
                            string(credentialsId: 'CLIENT_ID', variable: 'CLIENT_ID'),
                            string(credentialsId: 'CLIENT_SECRET', variable: 'CLIENT_SECRET'),
                            string(credentialsId: 'USERNAME', variable: 'USERNAME'),
                            string(credentialsId: 'PASSWORD', variable: 'PASSWORD'),
                            string(credentialsId: 'TOKEN_URL', variable: 'TOKEN_URL')
                        ]) {
                            script {
                                echo "Requesting Bearer token..."
                                def getTokenCmd = "curl -s -X POST \"${TOKEN_URL}\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=password&username=${USERNAME}&password=${PASSWORD}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&scope=urn:opc:idm:__myscopes__\""
                                def tokenResponse = bat(script: getTokenCmd, returnStdout: true).trim()
                                echo "Token Response: ${tokenResponse}"

                                def accessToken = new groovy.json.JsonSlurper().parseText(tokenResponse).access_token
                                echo "Retrieved Bearer Token"
                                
                                // Store the token in env variable if needed
                                env.BEARER_TOKEN = accessToken
                            }
                        }

                        def selectedOption = "${params.Import_Method}".trim()
                        if (selectedOption == 'New') {
                            echo 'Adding new integration'
                            def integURL = "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}"
                            echo "Integration URL: ${integURL}"
                            def deployIntegCmd = "curl --location \"${integURL}\" --header \"Authorization: Bearer ${env.BEARER_TOKEN}\" --form \"file=@\\\"${params.IARFileName}\\\"\""
                            bat(deployIntegCmd)
                        }
                    }
                }
            }
        }
    }
}
