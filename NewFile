def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
   for (int i = 0; i < input.length(); i++) {
       if (input.charAt(i) == '%') {
           result.append('%')
       }
       result.append(input.charAt(i))
   }
   return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.DEV_URL
    }
}

pipeline {
    agent any
    environment {
        DEV_Creds = credentials('DEV_CredID')
    }
    parameters {
        booleanParam(name: 'Activate_Integration', defaultValue: false, description: 'Check the box to activate the integration after importing')
    }

    stages {

        stage('Import Integration') {
            steps {
                script {
                    Update_details((params.InstanceURL).toString())
                    def selectedOption = "${params.Import_Method}".trim()
                    def integName = params.Integration_Identifier.toString()

                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        bat """
                            curl --location --request POST "${env.serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${env.test_Integration_Instance}" ^
                            --header "Authorization: Bearer ${OAuth}" ^
                            --header "Accept: application/json" ^
                            --form "file=@\\"${params.IARFileName}\\"" ^
                            --form "type=application/octet-stream"
                        """
                    } else if (selectedOption == 'Replace') {
                        echo 'Replacing an integration'
                        bat """
                            curl --location --request POST "${env.serviceURL}/ic/api/integration/v1/integrations/${integName}?integrationInstance=${env.test_Integration_Instance}" ^
                            --header "Authorization: Bearer ${OAuth}" ^
                            --header "Content-Type: application/json" ^
                            --header "X-HTTP-Method-Override: PATCH" ^
                            --data-binary @Deactivate.json
                        """

                        bat """
                            curl --location --request PUT "${env.serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${env.test_Integration_Instance}" ^
                            --header "Authorization: Bearer ${OAuth}" ^
                            --header "Accept: application/json" ^
                            --form "file=@\\"${params.IARFileName}\\"" ^
                            --form "type=application/octet-stream"
                        """
                    } else {
                        echo 'No import method is selected'
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.ConnectionProperties).trim()
                    def records = csvFile.readLines().drop(1).collect { line -> line.tokenize(',') }

                    records.each { record ->
                        def field1 = record[0]
                        def field2 = record[1]
                        def field3 = record[2]
                        def field4 = record[3]

                        def conProperties = """
                            {
                                "connectionProperties": {
                                    "propertyGroup": "CONNECTION_PROPS",
                                    "propertyName": "connectionUrl",
                                    "propertyType": "URL",
                                    "propertyValue": "${field1}"
                                },
                                "securityPolicy": "BASIC_AUTH",
                                "securityProperties": [
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "username",
                                        "propertyValue": "${field2}"
                                    },
                                    {
                                        "propertyGroup": "CREDENTIALS",
                                        "propertyName": "password",
                                        "propertyValue": "${field3}"
                                    }
                                ]
                            }
                        """
                        def payload = conProperties.replace('\n', '').trim()
                        writeFile file: 'payload.json', text: payload

                        echo 'Configuring connection'
                        bat """
                            curl -X POST ^
                            -H "Authorization: Bearer ${OAuth}" ^
                            -H "X-HTTP-Method-Override:PATCH" ^
                            -H "Content-Type:application/json" ^
                            --data-binary @payload.json ^
                            "${env.serviceURL}/ic/api/integration/v1/connections/${field4}?integrationInstance=${env.test_Integration_Instance}"
                        """
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def files = params.FileNames.split(',')
                    def selectedOption = params.Import_Method.trim()

                    files.each { fileName ->
                        fileName = fileName.trim()
                        if (fileName) {
                            def method = (selectedOption == 'Replace') ? 'PUT' : 'POST'
                            echo "${selectedOption == 'Replace' ? 'Replacing' : 'Adding'} lookup"
                            bat """
                                curl -X ${method} ^
                                -H "Authorization: Bearer ${OAuth}" ^
                                -F "file=@${fileName}" ^
                                -F "type=application/octet-stream" ^
                                "${env.serviceURL}/ic/api/integration/v1/lookups/archive?integrationInstance=${env.test_Integration_Instance}"
                            """
                        }
                    }
                }
            }
        }

        stage('Activation of Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier.toString()
                    if (params.Activate_Integration) {
                        echo 'Activating Integration'
                        bat """
                            curl -X POST ^
                            -H "Authorization: Bearer ${OAuth}" ^
                            -H "Content-Type: application/json" ^
                            -H "X-HTTP-Method-Override: PATCH" ^
                            -d @Activate.json ^
                            "${env.serviceURL}/ic/api/integration/v1/integrations/${passwordHandler(integName)}?integrationInstance=${env.test_Integration_Instance}"
                        """
                    } else {
                        echo 'Deactivating Integration'
                        bat """
                            curl -X POST ^
                            -H "Authorization: Bearer ${OAuth}" ^
                            -H "Content-Type: application/json" ^
                            -H "X-HTTP-Method-Override: PATCH" ^
                            -d @Deactivate.json ^
                            "${env.serviceURL}/ic/api/integration/v1/integrations/${passwordHandler(integName)}?integrationInstance=${env.test_Integration_Instance}"
                        """
                    }
                }
            }
        }
    }
}
