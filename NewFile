pipeline {
    agent any
    
    stages {
        stage('Validate OIC Credentials') {
    steps {
        script {
            withCredentials([string(credentialsId: 'OAuth', variable: 'OAuth')]) {
                def serviceURL = ""
                if (params.InstanceURL == "DEV") {
                    serviceURL = env.DEV_URL
                }

                // Use %OAuth% (Windows env) instead of ${OAuth}
                def response = bat(
                    script: """
                    curl -s -o NUL -w "%%{http_code}" ^
                    -H "Authorization: Bearer %OAuth%" ^
                    "${serviceURL}/ic/api/integration/v1/integrations"
                    """,
                    returnStdout: true
                ).trim()

                response = response.replaceAll("[^0-9]", "")  // keep only digits

                if (response == "200") {
                    echo "‚úÖ OIC credentials are valid."
                } else if (response == "401" || response == "403") {
                    error("‚ùå Unauthorized - check OAuth token scope/expiry.")
                } else {
                    error("‚ùå Unexpected response code: ${response}")
                }
            }
        }
    }
}


        stage('Check OIC Status') {
            steps {
                script {
                    def statusCheck = bat(
                        script: """
                        curl -s -X GET \\
                          -H "Authorization: Bearer ${env.OIC_BEARER_TOKEN}" \\
                          %OIC_HOST_URL%/ic/api/integration/v1/monitoring/status
                        """,
                        returnStdout: true
                    ).trim()

                    if (statusCheck.contains("DOWN") || statusCheck.contains("INACTIVE")) {
                        error("‚ùå OIC instance is inactive. Stopping pipeline.")
                    } else {
                        echo "‚úÖ OIC instance is active."
                    }
                }
            }
        }

        stage('Run Migration Script') {
            when {
                expression { return env.OIC_BEARER_TOKEN != null }
            }
            steps {
                script {
                    echo "üöÄ Running migration script..."
                    // üëâ Place your existing migration logic here
                }
            }
        }
    }
}
