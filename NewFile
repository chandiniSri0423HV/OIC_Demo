def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
   for (int i = 0; i < input.length(); i++) {
       if (input.charAt(i) == '%') {
           result.append('%')
       }
       result.append(input.charAt(i))
   }
   return result.toString()
}

pipeline {
    agent any

    parameters {
        string(name: 'InstanceURL', defaultValue: 'DEV', description: 'Target Instance (e.g., DEV)')
        string(name: 'Import_Method', defaultValue: 'New', description: 'Import Method (New or Replace)')
        string(name: 'IARFileName', defaultValue: 'ITEM_INTEGRATION_01.00.0000.iar', description: 'IAR file name')
    }

    stages {
        stage('Import Integration') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW')
                ]) {
                    script {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            echo "Using DEV environment"
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        echo "Service URL: ${serviceURL}"
                        echo "Import Method: ${params.Import_Method}"

                        // === Bearer Token Authentication (Client Credentials) Block ===
                        withCredentials([
                            string(credentialsId: 'OIC_CLIENT_ID', variable: 'CLIENT_ID'),
                            string(credentialsId: 'OIC_CLIENT_SECRET', variable: 'CLIENT_SECRET'),
                            usernamePassword(credentialsId: 'OIC_USER_CRED', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'),
                            string(credentialsId: 'OIC_TOKEN_ENDPOINT', variable: 'TOKEN_URL')
                        ]) {
                            def getTokenCmd = """
                            curl -s -X POST "${TOKEN_URL}" \\
                            -H "Content-Type: application/x-www-form-urlencoded" \\
                            -d "grant_type=password&username=${USERNAME}&password=${PASSWORD}&client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&scope=urn:opc:idm:__myscopes__"
                            """
                            def tokenResponse = bat(script: getTokenCmd, returnStdout: true).trim()
                            def json = new groovy.json.JsonSlurper().parseText(tokenResponse)
                            def bearerToken = json.access_token

                            if (!bearerToken) {
                                error "❌ Failed to fetch Bearer token. Check credentials or endpoint."
                            }

                            echo "✅ Bearer token retrieved."

                            // Optionally call using Bearer token instead of basic auth
                            if (params.Import_Method.trim() == 'New') {
                                def integURL = "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}"
                                echo "Integration URL (Bearer): ${integURL}"
                                def deployBearerCmd = """
                                curl --location --request POST "${integURL}" \\
                                --header "Authorization: Bearer ${bearerToken}" \\
                                --form "file=@\\\"${params.IARFileName}\\\""
                                """
                                bat(deployBearerCmd)
                            }
                        }

                        // === Original Basic Auth Block (Unchanged) ===
                        def selectedOption = "${params.Import_Method}".trim()
                        if (selectedOption == 'New') {
                            echo 'Adding new integration (Basic Auth)'
                            def integURL = "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}"
                            echo "Integration URL (Basic): ${integURL}"
                            def deployIntegCmd = "curl --location \"${integURL}\" --user ${USR}:${PSW} --form \"file=@\\\"${params.IARFileName}\\\"\""
                            bat(deployIntegCmd)
                        }
                    }
                }
            }
        }
    }
}
