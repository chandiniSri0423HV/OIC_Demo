def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.DEV_URL
    } else if (instance_selected.equals("UAT")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.TEST_URL
        env.testInstance = env.test_Integration_Instance
    }
}

pipeline {
    agent any

    environment {
        DEV_Creds = credentials('DEV_CredID')
    }

    stages {
        stage('Import Integration') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW'),
                        string(credentialsId: 'OAuth', variable: 'OAuth')
                    ]) {
                        def serviceURL = ""
                        def testInstance = ""

                        if (params.InstanceURL.toString() == "DEV") {
                            echo "Using DEV environment"
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def selectedOption = "${params.Import_Method}".trim()
                        if (selectedOption == 'New') {
                            echo "Adding New Integration"
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer %OAuth%" ^
                                --form "file=@\\"${params.IARFileName}\\""
                            """
                        } else if (selectedOption == 'Replace') {
                            echo 'Replacing an integration'
                            def integName = params.Integration_Identifier.toString()

                            // Deactivate integration
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/${integName}?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer %OAuth%" ^
                                --header "Content-Type: application/json" ^
                                --header "X-HTTP-Method-Override: PATCH" ^
                                --data "{\\"status\\":\\"CONFIGURED\\"}"
                            """
                            echo 'Deactivated Integration to be Replaced'

                            // Import new .iar
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer %OAuth%" ^
                                --form "file=@\\"${params.IARFileName}\\""
                            """
                            echo 'Integration Replaced'
                        } else {
                            echo 'No import method is selected'
                        }
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'OAuth', variable: 'OAuth')
                    ]) {
                        // DEBUG: Show available files
                        bat 'dir /s /b'
                        bat 'dir Connections'

                        def connFileName = "${params.ConnectionFileName}".trim()
                        def connFilePath = "Connections/${connFileName}"

                        echo "Reading connection file: ${connFilePath}"
                        def connData = readFile(file: connFilePath)

                        echo "Connection JSON content loaded (masked in logs)"

                        // Call the connection import API (example)
                        def connURL = "${env.DEV_URL}/ic/api/integration/v1/connections"

                        bat """
                            curl --location --request POST "${connURL}" ^
                            --header "Authorization: Bearer %OAuth%" ^
                            --header "Content-Type: application/json" ^
                            --data @${connFilePath}
                        """
                    }
                }
            }
        }
    }
}
