def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.DEV_URL
    } else if (instance_selected.equals("UAT")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.TEST_URL
        env.testInstance = env.test_Integration_Instance
    }
}

pipeline {
    agent any
    environment {
        DEV_Creds = credentials('DEV_CredID')
    }
    stages {
        stage('Import Integration') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'DEV_CredID', usernameVariable: 'USR', passwordVariable: 'PSW'),
                        string(credentialsId: 'OAuth', variable: 'OAuth')
                    ]) {
                        def serviceURL = "https://design.integration.us-ashburn-1.ocp.oraclecloud.com"
                        def testInstance = "testinstance-idevjxz332qf-ia"

                        if (params.InstanceURL.toString() == "DEV") {
                            echo "Using DEV environment"
                            serviceURL = env.DEV_URL
                            testInstance = env.test_Integration_Instance
                        }

                        def selectedOption = "${params.Import_Method}".trim()
                        if (selectedOption == 'New') {
                            // Update_details((params.InstanceURL).toString())
                            // echo "${env.serviceURL}"
                            bat """
                                curl --location "${serviceURL}/ic/api/integration/v1/integrations/archive?integrationInstance=${testInstance}" ^
                                --header "Authorization: Bearer ${OAuth}" ^
                                --form "file=@\\"${params.IARFileName}\\""
                            """
                        }
                    }
                }
            }
        }
    }
}
