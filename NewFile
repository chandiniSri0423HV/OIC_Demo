pipeline {
    agent any
    environment {
        OAuth = credentials('Bearer_Token')  // Assume this is stored as a secret text credential in Jenkins
    }
    parameters {
        booleanParam(name: 'Activate_Integration', defaultValue: false, description: 'Check the box to activate the integration after importing')
    }

    stages {
        stage('Import Integration') {
            steps {
                script {
                    def selectedOption = "${params.Import_Method}".trim()
                    def integURL = "${env.serviceURL}/ic/api/integration/v1/integrations/archive"

                    if (selectedOption == 'New') {
                        echo 'Adding new integration'
                        def deployIntegCmd = """
                            curl --location "${integURL}" \
                                 --header "Authorization: Bearer ${OAuth}" \
                                 --form "file=@\\"${params.IARFileName}\\""
                        """
                        bat(deployIntegCmd)
                    } else if (selectedOption == 'Replace') {
                        echo 'Replacing an integration'
                        def integName = params.Integration_Identifier.toString()
                        def deactivateCmd = """
                            curl --header "Authorization: Bearer ${OAuth}" \
                                 --header "Content-Type: application/json" \
                                 --header "X-HTTP-Method-Override: PATCH" \
                                 -d @Deactivate.json \
                                 -d "enableAsyncActivationMode=true" \
                                 "${env.serviceURL}/ic/api/integration/v1/integrations/${integName}"
                        """
                        bat(deactivateCmd)

                        def updateCmd = """
                            curl -X PUT \
                                 --header "Authorization: Bearer ${OAuth}" \
                                 --header "Accept: application/json" \
                                 --form "file=@\\"${params.IARFileName}\\"" \
                                 --form "type=application/octet-stream" \
                                 "${integURL}"
                        """
                        bat(updateCmd)
                    } else {
                        echo 'No import method is selected'
                    }
                }
            }
        }

        stage('Import Connection') {
            steps {
                script {
                    def csvFile = readFile(params.ConnectionProperties).trim()
                    def records = csvFile.readLines().drop(1).collect { it.tokenize(',') }

                    records.each { record ->
                        def field1 = record[0]
                        def field2 = record[1]
                        def field3 = record[2]
                        def field4 = record[3]

                        def conProperties = """
                        {
                            "connectionProperties": {
                                "propertyGroup": "CONNECTION_PROPS",
                                "propertyName": "connectionUrl",
                                "propertyType": "URL",
                                "propertyValue": "${field1}"
                            },
                            "securityPolicy": "BASIC_AUTH",
                            "securityProperties": [
                                {
                                    "propertyGroup": "CREDENTIALS",
                                    "propertyName": "username",
                                    "propertyValue": "${field2}"
                                },
                                {
                                    "propertyGroup": "CREDENTIALS",
                                    "propertyName": "password",
                                    "propertyValue": "${field3}"
                                }
                            ]
                        }
                        """.replace('\n', '').trim()

                        writeFile file: 'payload.json', text: conProperties

                        def selectedOption = "${params.Import_Method}".trim()
                        def curlCmd = """
                            curl -X POST \
                                 --header "Authorization: Bearer ${OAuth}" \
                                 --header "X-HTTP-Method-Override: PATCH" \
                                 --header "Content-Type: application/json" \
                                 -d @payload.json \
                                 "${env.serviceURL}/ic/api/integration/v1/connections/${field4}"
                        """

                        echo selectedOption == 'New' ? 'Adding new connection' : 'Replacing a connection'
                        bat(curlCmd)
                    }
                }
            }
        }

        stage('Import Lookup') {
            steps {
                script {
                    def files = params.FileNames.split(',')
                    def selectedOption = params.Import_Method.trim()

                    files.each { fileName ->
                        fileName = fileName.trim()
                        if (fileName) {
                            def method = selectedOption == 'New' ? 'POST' : 'PUT'
                            def curlCmd = """
                                curl -X ${method} \
                                     --header "Authorization: Bearer ${OAuth}" \
                                     -F "file=@${fileName}" \
                                     -F "type=application/octet-stream" \
                                     ${env.serviceURL}/ic/api/integration/v1/lookups/archive
                            """
                            echo selectedOption == 'New' ? 'Adding new lookup' : 'Replacing a lookup'
                            bat(curlCmd)
                        }
                    }
                }
            }
        }

        stage('Activation of Integration') {
            steps {
                script {
                    def integName = params.Integration_Identifier.toString()
                    if (params.Activate_Integration) {
                        echo 'Checkbox is checked'
                        def activateCmd = """
                            curl --header "Authorization: Bearer ${OAuth}" \
                                 --header "Content-Type: application/json" \
                                 --header "X-HTTP-Method-Override: PATCH" \
                                 -d @Activate.json \
                                 "${env.serviceURL}/ic/api/integration/v1/integrations/${integName}"
                        """
                        bat(activateCmd)
                        echo "Integration Activated"
                    } else {
                        echo 'Checkbox is not checked'
                        def deactivateCmd = """
                            curl --header "Authorization: Bearer ${OAuth}" \
                                 --header "Content-Type: application/json" \
                                 --header "X-HTTP-Method-Override: PATCH" \
                                 -d @Deactivate.json \
                                 -d "enableAsyncActivationMode=true" \
                                 "${env.serviceURL}/ic/api/integration/v1/integrations/${integName}"
                        """
                        bat(deactivateCmd)
                        echo "Integration Configured"
                    }
                }
            }
        }
    }
}
